# Luke's lf settings


# Note on Image Previews
# For those wanting image previews, like this system, there are four steps to
# set it up. These are done automatically for LARBS users, but I will state
# them here for others doing it manually.
#
# 1. ueberzug must be installed.
# 2. The scope file (~/.config/lf/scope for me), must have a command similar to
#    mine to generate ueberzug images.
# 3. A `set cleaner` line as below is a cleaner script.
# 4. lf should be started through a wrapper script (~/.local/bin/lfub for me)
#    that creates the environment for ueberzug. This command can be be aliased
#    in your shellrc (`alias lf="lfub") or if set to a binding, should be
#    called directly instead of normal lf.

# Basic vars
set shellopts '-eu'
set ifs "\n"
set scrolloff 10
set icons
set period 1
set hiddenfiles ".*:*.aux:*.log:*.bbl:*.bcf:*.blg:*.run.xml"
set cleaner '~/.config/lf/cleaner'
set previewer '~/.config/lf/scope'

# cmds/functions
cmd open ${{
    case $(file --mime-type "$(readlink -f $f)" -b) in
	application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) localc $fx ;;
	image/vnd.djvu|application/pdf|application/octet-stream|application/postscript) setsid -f okular $fx >/dev/null 2>&1 ;;
        text/*|application/json|inode/x-empty) $EDITOR $fx;;
	image/x-xcf) setsid -f gimp $f >/dev/null 2>&1 ;;
	image/svg+xml) display -- $f ;;
#	image/*) rotdir $f | grep -i "\.\(png\|jpg\|jpeg\|gif\|webp\|tif\|ico\)\(_large\)*$" |
#		setsid -f gwenview -aio 2>/dev/null | while read -r file; do
#			[ -z "$file" ] && continue
#			lf -remote "send select \"$file\""
#			lf -remote "send toggle"
#		done &
#		;;
#	audio/*) mpv --audio-display=no $f ;;
#	audio/*) mpv $f ;;
	audio/*) setsid -f mpv $f -quiet >/dev/null 2>&1 ;;
	video/*) setsid -f mpv $f -quiet >/dev/null 2>&1 ;;
	application/pdf|application/vnd*|application/epub*) setsid -f okular $fx >/dev/null 2>&1 ;;
	application/pgp-encrypted) $EDITOR $fx ;;
        *) for f in $fx; do setsid -f $OPENER $f >/dev/null 2>&1; done;;
    esac
}}


#cmd extract ${{
#	clear; tput cup $(($(tput lines)/3)); tput bold
#	set -f
#	printf "%s\n\t" "$fx"
#	printf "extract?[y/N]"
#	read ans
#	[ $ans = "y" ] && aunpack $fx
#}}

cmd delete ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "delete?[y/N]"
	read ans
	[ $ans = "y" ] && rm -rf -- $fx
}}

cmd chmod ${{
  printf "Mode Bits: "
  read ans

  for file in "$fx"
  do
    chmod $ans $file
  done

  lf -remote 'send reload'
}}

cmd mkfile ${{
  printf "File Name: "
  read ans
  #sudo $EDITOR $ans
  touch $ans
  vi $ans
}}

cmd mkscript ${{
  printf "File Name: "
  read ans
  touch $ans
  chmod 770 $ans
  #sudo $EDITOR $ans
  vi $ans
}}

cmd exscript ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "Run the script?[y/N]"
	read ans
	[ $ans = "y" ] && bash $fx
}}


cmd sudomkfile ${{
  printf "File Name: "
  read ans
  sudo $EDITOR $ans
}}

cmd mkd ${{
  printf "Dir Name:"
  read ans
  mkdir -p $ans
}}

cmd sudomkdir ${{
  printf "Dir Name:"
  read ans
  sudo mkdir -p $ans
}}

cmd bulkrename ${{
  qmv -f do
}}

cmd setbg "$1"
#cmd bulkrename "$vidir"

#cmd dragon %dragon-drag-and-drop -a -x $fx
#cmd dragon-stay %dragon-drag-and-drop -a $fx
#cmd dragon-individual %dragon-drag-and-drop $fx
cmd dragon %dragon -a -x $fx
cmd dragon-stay %dragon -a $fx
cmd dragon-individual %dragon $fx
#cmd dlfile %dlfile


# Trash cli bindings
cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    # extract the substring from start of string up to delimiter.
    # this is the first "element" of the string.
    file=${files%%;*}

    trash-put "$(basename "$file")"
    # if there's only one element left, set `files` to an empty string.
    # this causes us to exit this `while` loop.
    # else, we delete the first "element" of the string from files, and move onto the next.
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}

cmd clear_trash %trash-empty

cmd restore_trash ${{
  trash-restore
}}

# Archive bindings
cmd unarchive ${{
  case "$f" in
      *.zip) unzip "$f" ;;
      *.tar.gz) tar -xzvf "$f" ;;
      *.tar.bz2) tar -xjvf "$f" ;;
      *.tar) tar -xvf "$f" ;;
      *) echo "Unsupported format" ;;
  esac
}}

cmd zip %zip -r "$f" "$f"
cmd tar %tar cvf "$f.tar" "$f"
cmd targz %tar cvzf "$f.tar.gz" "$f"
cmd tarbz2 %tar cjvf "$f.tar.bz2" "$f"

cmd vscode ${{
  code $f 
  }}

cmd kdeconnectx ${{
clear; tput cup $(($(tput lines)/3)); tput bold
set -f
printf "%s\n\t" "$fx"
printf "Share to Phone? [y/N]"
read ans
[ $ans = "y" ] && kdeconnect-cli --share $fx -n SM-A037F
}}

# Bindings
# Remove some defaults
map m
map a
map o
#map n
#map N
map M
#map "'"
#map '"'
map d
map c
map e
map E
map f
map b
map t
map R


map <c-f> $lf -remote "send $id select \"$(fzf)\""
map J $lf -remote "send $id cd $(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf)"
map gh
map dd trash
map D delete
map tc clear_trash
map tr restore_trash

#map X extract
map az zip
map at tar
map ag targz
map ab targz
map au unarchive

#map C copyto
#map M moveto
map x cut
map p paste
map C clear
map U unselect
map y copy
#map <c-n> push :mkdir<space>
map md mkd
map mf mkfile
map ms mkscript
map Md sudomkdir 
map Mf sudomkfile
map ch chmod
map <c-r> reload
map . set hidden!
map <enter> open
map <c-j> open
map e open
map E exscript
map V vscode
map 
#map x $$f
#map X !$f
map O &mimeopen $f
map o $mimeopen --ask $f

#map A rename # at the very end
#map c push A<c-u> # new rename
map I push A<c-a> # at the very beginning
map i push A<a-b><a-b><a-f> # before extension
#map a push A<a-b> # after extension
map r rename
map R bulkrename
#map b $setbg $f

map <c-e> down
map <c-y> up
#map V push :!vim<space>

#map W $setsid -f $TERMINAL >/dev/null 2>&1

map Y $printf "%s" "$fx" | xclip -selection clipboard

map do dragon
map ds dragon-stay
map di dragon-individual
#map dl dlfile

map KX kdeconnectx


# Source Bookmarks
source "~/.config/lf/shortcutrc"

